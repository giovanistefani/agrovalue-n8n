#!/bin/bash

# Script para deploy na AWS
set -e

echo "üöÄ Deploy AgroValue N8N na AWS"

# Verificar pr√©-requisitos
check_prerequisites() {
    echo "üîç Verificando pr√©-requisitos..."
    
    if ! command -v terraform &> /dev/null; then
        echo "‚ùå Terraform n√£o est√° instalado. Instale em: https://terraform.io"
        exit 1
    fi
    
    if ! command -v aws &> /dev/null; then
        echo "‚ùå AWS CLI n√£o est√° instalado. Instale em: https://aws.amazon.com/cli/"
        exit 1
    fi
    
    # Verificar credenciais AWS
    if ! aws sts get-caller-identity &> /dev/null; then
        echo "‚ùå Credenciais AWS n√£o configuradas. Execute: aws configure"
        exit 1
    fi
    
    echo "‚úÖ Pr√©-requisitos verificados"
}

# Configurar vari√°veis de ambiente
setup_environment() {
    echo "üìÑ Configurando ambiente..."
    
    if [ ! -f "configs/.env.production" ]; then
        echo "‚ùå Arquivo configs/.env.production n√£o encontrado"
        echo "   Copie configs/.env.example para configs/.env.production e configure as vari√°veis"
        exit 1
    fi
    
    # Carregar vari√°veis de ambiente
    export $(cat configs/.env.production | grep -v '#' | xargs)
    
    echo "‚úÖ Vari√°veis de ambiente carregadas"
}

# Validar configura√ß√µes obrigat√≥rias
validate_config() {
    echo "üîç Validando configura√ß√µes..."
    
    required_vars=(
        "N8N_BASIC_AUTH_PASSWORD"
        "N8N_ENCRYPTION_KEY"
        "DB_POSTGRESDB_PASSWORD"
    )
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            echo "‚ùå Vari√°vel obrigat√≥ria $var n√£o est√° definida"
            exit 1
        fi
    done
    
    # Verificar se as senhas s√£o seguras
    if [ ${#N8N_BASIC_AUTH_PASSWORD} -lt 8 ]; then
        echo "‚ùå N8N_BASIC_AUTH_PASSWORD deve ter pelo menos 8 caracteres"
        exit 1
    fi
    
    if [ ${#N8N_ENCRYPTION_KEY} -lt 32 ]; then
        echo "‚ùå N8N_ENCRYPTION_KEY deve ter pelo menos 32 caracteres"
        exit 1
    fi
    
    echo "‚úÖ Configura√ß√µes validadas"
}

# Inicializar Terraform
init_terraform() {
    echo "üèóÔ∏è  Inicializando Terraform..."
    
    cd terraform
    
    terraform init
    
    echo "‚úÖ Terraform inicializado"
}

# Planejar deploy
plan_terraform() {
    echo "üìã Planejando deploy..."
    
    terraform plan \
        -var="n8n_basic_auth_user=${N8N_BASIC_AUTH_USER:-admin}" \
        -var="n8n_basic_auth_password=${N8N_BASIC_AUTH_PASSWORD}" \
        -var="n8n_encryption_key=${N8N_ENCRYPTION_KEY}" \
        -var="db_password=${DB_POSTGRESDB_PASSWORD}" \
        -var="domain_name=${N8N_HOST:-}" \
        -var="certificate_arn=${SSL_CERTIFICATE_ARN:-}" \
        -var="aws_region=${AWS_REGION:-us-east-1}" \
        -var="environment=production" \
        -out=tfplan
    
    echo "‚úÖ Plano criado"
}

# Executar deploy
apply_terraform() {
    echo "üöÄ Executando deploy..."
    
    read -p "Deseja continuar com o deploy? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Deploy cancelado"
        exit 1
    fi
    
    terraform apply tfplan
    
    echo "‚úÖ Deploy conclu√≠do"
}

# Obter outputs importantes
get_outputs() {
    echo "üìä Obtendo informa√ß√µes do deploy..."
    
    echo ""
    echo "üåê URL da aplica√ß√£o:"
    terraform output -raw load_balancer_url
    echo ""
    echo ""
    echo "üìã Informa√ß√µes importantes:"
    echo "   - Cluster ECS: $(terraform output -raw ecs_cluster_name)"
    echo "   - Service ECS: $(terraform output -raw ecs_service_name)"
    echo "   - Bucket S3: $(terraform output -raw s3_bucket_name)"
    echo "   - Log Group: $(terraform output -raw cloudwatch_log_group)"
    echo ""
    echo "üí∞ Estimativa de custos:"
    terraform output -json estimated_monthly_cost | jq -r 'to_entries[] | "   - \(.key): \(.value)"'
    echo ""
    echo "üí° Dicas de otimiza√ß√£o:"
    terraform output -json cost_optimization_tips | jq -r '.[] | "   - \(.)"'
}

# Configurar monitoramento
setup_monitoring() {
    echo "üìä Configurando monitoramento..."
    
    # Criar dashboard CloudWatch
    aws cloudwatch put-dashboard \
        --dashboard-name "AgroValue-N8N" \
        --dashboard-body file://$(pwd)/../configs/cloudwatch-dashboard.json \
        --region ${AWS_REGION:-us-east-1} || echo "‚ö†Ô∏è  Dashboard n√£o p√¥de ser criado (arquivo n√£o encontrado)"
    
    echo "‚úÖ Monitoramento configurado"
}

# Menu principal
main() {
    echo "üå± AgroValue N8N - Deploy AWS"
    echo "================================"
    echo ""
    
    check_prerequisites
    setup_environment
    validate_config
    init_terraform
    plan_terraform
    apply_terraform
    get_outputs
    setup_monitoring
    
    echo ""
    echo "üéâ Deploy conclu√≠do com sucesso!"
    echo ""
    echo "üìù Pr√≥ximos passos:"
    echo "   1. Acesse a URL fornecida acima"
    echo "   2. Configure seus workflows no N8N"
    echo "   3. Configure alertas SNS se necess√°rio"
    echo "   4. Monitore custos no AWS Cost Explorer"
    echo ""
    echo "üÜò Para suporte, consulte a documenta√ß√£o em docs/"
}

# Tratar interrup√ß√µes
trap 'echo "‚ùå Deploy interrompido"; exit 1' INT TERM

# Verificar se est√° sendo executado do diret√≥rio correto
if [ ! -f "terraform/main.tf" ]; then
    echo "‚ùå Execute este script a partir do diret√≥rio raiz do projeto"
    exit 1
fi

# Executar fun√ß√£o principal
main "$@"
